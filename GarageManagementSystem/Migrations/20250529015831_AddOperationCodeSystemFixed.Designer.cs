// <auto-generated />
using System;
using GarageManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GarageManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250529015831_AddOperationCodeSystemFixed")]
    partial class AddOperationCodeSystemFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GarageManagementSystem.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MechanicId")
                        .HasColumnType("int");

                    b.Property<string>("MechanicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChassisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MechanicId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MechanicId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.CarMechanicAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("MechanicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("MechanicId");

                    b.ToTable("CarMechanicAssignments");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Fault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReportedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MechanicId")
                        .HasColumnType("int");

                    b.Property<int?>("MechanicReportId")
                        .HasColumnType("int");

                    b.Property<bool>("ResolutionStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("MechanicReportId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerRequest")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateReported")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MechanicId")
                        .HasColumnType("int");

                    b.Property<string>("NextServiceAdvice")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("NextServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextServiceKm")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServiceDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("MechanicId");

                    b.ToTable("MechanicReports");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReportLabour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("MechanicReportId")
                        .HasColumnType("int");

                    b.Property<string>("OperationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("TotalAmountWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MechanicReportId");

                    b.ToTable("MechanicReportLabours");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReportPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("MechanicReportId")
                        .HasColumnType("int");

                    b.Property<string>("OperationCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("MechanicReportId");

                    b.ToTable("MechanicReportParts");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.OperationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("OperationCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "FLRS10",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Standard oil change and filter replacement service",
                            IsActive = true,
                            Name = "Oil Change Service"
                        },
                        new
                        {
                            Id = 2,
                            Code = "PART1",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "General automotive parts and accessories",
                            IsActive = true,
                            Name = "General Parts"
                        },
                        new
                        {
                            Id = 3,
                            Code = "BRKS20",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Brake system maintenance and parts",
                            IsActive = true,
                            Name = "Brake Service"
                        },
                        new
                        {
                            Id = 4,
                            Code = "TIRE30",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tire installation, balancing, and wheel services",
                            IsActive = true,
                            Name = "Tire Service"
                        },
                        new
                        {
                            Id = 5,
                            Code = "BATRY40",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Battery replacement and electrical system parts",
                            IsActive = true,
                            Name = "Battery Service"
                        });
                });

            modelBuilder.Entity("GarageManagementSystem.Models.OperationCodePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("OperationCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("OperationCodeId1")
                        .HasColumnType("int");

                    b.Property<int>("ServicePartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationCodeId1");

                    b.HasIndex("ServicePartId");

                    b.HasIndex("OperationCodeId", "ServicePartId")
                        .IsUnique();

                    b.ToTable("OperationCodeParts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            OperationCodeId = 1,
                            ServicePartId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            OperationCodeId = 1,
                            ServicePartId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            OperationCodeId = 1,
                            ServicePartId = 3
                        },
                        new
                        {
                            Id = 4,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            OperationCodeId = 2,
                            ServicePartId = 4
                        },
                        new
                        {
                            Id = 5,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            OperationCodeId = 2,
                            ServicePartId = 5
                        },
                        new
                        {
                            Id = 6,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            OperationCodeId = 2,
                            ServicePartId = 6
                        },
                        new
                        {
                            Id = 7,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            OperationCodeId = 3,
                            ServicePartId = 7
                        },
                        new
                        {
                            Id = 8,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            OperationCodeId = 3,
                            ServicePartId = 8
                        },
                        new
                        {
                            Id = 9,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            OperationCodeId = 4,
                            ServicePartId = 9
                        },
                        new
                        {
                            Id = 10,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            OperationCodeId = 4,
                            ServicePartId = 10
                        },
                        new
                        {
                            Id = 11,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            OperationCodeId = 5,
                            ServicePartId = 11
                        },
                        new
                        {
                            Id = 12,
                            AssignedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = false,
                            OperationCodeId = 5,
                            ServicePartId = 12
                        });
                });

            modelBuilder.Entity("GarageManagementSystem.Models.ServiceInspectionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MechanicReportId")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MechanicReportId");

                    b.ToTable("ServiceInspectionItems");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.ServicePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("ServiceParts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Standard oil filter element",
                            PartName = "ELEMENT S/A OIL FILTER",
                            PartNumber = "15601-P2A12",
                            Price = 11.90m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Full synthetic motor oil 3 liters",
                            PartName = "PEO FULL-SYN 0W-20 API SN -3L",
                            PartNumber = "70010105",
                            Price = 140.50m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Oil drain plug gasket",
                            PartName = "GASKET",
                            PartNumber = "90044-30281",
                            Price = 3.80m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Small battery terminal protector spray",
                            PartName = "BATTERY TERMINAL PROTECTOR (SMALL)",
                            PartNumber = "999-40011-00000",
                            Price = 3.80m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Windshield washer fluid concentrate",
                            PartName = "WINDSHIELD WASHER (30ML)",
                            PartNumber = "999-50001-00000",
                            Price = 1.70m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Fuel injector cleaning solution",
                            PartName = "INJECTOR CLEANER 95ML",
                            PartNumber = "999-53100-00001",
                            Price = 24.00m
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Front brake pad set - ceramic",
                            PartName = "BRAKE PAD SET FRONT",
                            PartNumber = "43022-S5A-000",
                            Price = 85.00m
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Rear brake pad set - ceramic",
                            PartName = "BRAKE PAD SET REAR",
                            PartNumber = "43022-S5A-013",
                            Price = 65.00m
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "All-season tire 205/55R16",
                            PartName = "TIRE 205/55R16",
                            PartNumber = "TYR-205-55-16",
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "Performance tire 225/45R17",
                            PartName = "TIRE 225/45R17",
                            PartNumber = "TYR-225-45-17",
                            Price = 220.00m
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "12V automotive battery 55Ah",
                            PartName = "BATTERY 55D23L 12V",
                            PartNumber = "BAT-55D23L",
                            Price = 180.00m
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            PartDescription = "12V automotive battery 75Ah",
                            PartName = "BATTERY 75D23L 12V",
                            PartNumber = "BAT-75D23L",
                            Price = 220.00m
                        });
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Appointment", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Car", "Car")
                        .WithMany("Appointments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementSystem.Models.Users", "Mechanic")
                        .WithMany()
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GarageManagementSystem.Models.Users", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Mechanic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Car", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Users", "Mechanic")
                        .WithMany()
                        .HasForeignKey("MechanicId");

                    b.HasOne("GarageManagementSystem.Models.Users", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GarageManagementSystem.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Mechanic");

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.CarMechanicAssignment", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Car", "Car")
                        .WithMany("CarMechanicAssignments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementSystem.Models.Users", "Mechanic")
                        .WithMany("CarMechanicAssignments")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Car");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Fault", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Car", "Car")
                        .WithMany("Faults")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementSystem.Models.Users", "Mechanic")
                        .WithMany()
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GarageManagementSystem.Models.MechanicReport", "MechanicReport")
                        .WithMany("Faults")
                        .HasForeignKey("MechanicReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Car");

                    b.Navigation("Mechanic");

                    b.Navigation("MechanicReport");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReport", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Car", "Car")
                        .WithMany("Reports")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("GarageManagementSystem.Models.Users", "Mechanic")
                        .WithMany("MechanicReports")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Car");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReportLabour", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.MechanicReport", "MechanicReport")
                        .WithMany("LabourItems")
                        .HasForeignKey("MechanicReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MechanicReport");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReportPart", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GarageManagementSystem.Models.MechanicReport", "MechanicReport")
                        .WithMany("Parts")
                        .HasForeignKey("MechanicReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("MechanicReport");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Notification", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Users", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.OperationCodePart", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.OperationCode", "OperationCode")
                        .WithMany()
                        .HasForeignKey("OperationCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementSystem.Models.OperationCode", null)
                        .WithMany("OperationCodeParts")
                        .HasForeignKey("OperationCodeId1");

                    b.HasOne("GarageManagementSystem.Models.ServicePart", "ServicePart")
                        .WithMany("OperationCodeParts")
                        .HasForeignKey("ServicePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationCode");

                    b.Navigation("ServicePart");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.ServiceInspectionItem", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.MechanicReport", "MechanicReport")
                        .WithMany("InspectionItems")
                        .HasForeignKey("MechanicReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MechanicReport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageManagementSystem.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GarageManagementSystem.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Car", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CarMechanicAssignments");

                    b.Navigation("Faults");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.MechanicReport", b =>
                {
                    b.Navigation("Faults");

                    b.Navigation("InspectionItems");

                    b.Navigation("LabourItems");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.OperationCode", b =>
                {
                    b.Navigation("OperationCodeParts");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.ServicePart", b =>
                {
                    b.Navigation("OperationCodeParts");
                });

            modelBuilder.Entity("GarageManagementSystem.Models.Users", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CarMechanicAssignments");

                    b.Navigation("Cars");

                    b.Navigation("MechanicReports");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
