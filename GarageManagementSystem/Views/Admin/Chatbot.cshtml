@{
    ViewData["Title"] = "AI Assistant";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    .chatbot-page-container {
        height: calc(100vh - 160px);
        display: flex;
        flex-direction: column;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 1rem;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        margin: 1rem 0;
    }

    .chat-header {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .chat-content {
        flex: 1;
        overflow: hidden;
        display: flex;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
    }

    .suggestions-panel {
        width: 350px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-left: 1px solid rgba(255, 255, 255, 0.2);
        padding: 1rem;
        overflow-y: auto;
    }

    .message {
        margin-bottom: 1rem;
        animation: slideInUp 0.3s ease;
    }

    @@keyframes slideInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .message.user {
        text-align: right;
    }

    .message.assistant {
        text-align: left;
    }

    .message-bubble {
        display: inline-block;
        max-width: 80%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        word-wrap: break-word;
        position: relative;
    }

    .message.user .message-bubble {
        background: linear-gradient(135deg, #1b6ec2, #1861ac);
        color: white;
        box-shadow: 0 4px 15px rgba(27, 110, 194, 0.3);
    }

    .message.assistant .message-bubble {
        background: rgba(255, 255, 255, 0.95);
        color: #333;
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .chat-input {
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .suggestion-card {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 0.75rem;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(5px);
    }

        .suggestion-card:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            border-color: rgba(255, 255, 255, 0.4);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        }

    .suggestion-category {
        font-size: 0.75rem;
        opacity: 0.8;
        margin-bottom: 0.25rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .quick-stats {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 0.75rem;
        padding: 1rem;
        margin-bottom: 1rem;
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .stat-item:last-child {
            border-bottom: none;
        }

    .related-actions {
        margin-top: 1rem;
    }

    .action-btn {
        display: inline-block;
        padding: 0.5rem 1rem;
        margin: 0.25rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.3);
        border-radius: 0.5rem;
        color: white;
        text-decoration: none;
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

        .action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
        }

    .typing-indicator {
        display: none;
        padding: 0.5rem 1rem;
        font-style: italic;
        color: rgba(255, 255, 255, 0.7);
    }

    .typing-dots::after {
        content: '...';
        animation: typing 1.5s infinite;
    }

    @@keyframes typing {
        0%, 60%

    {
        content: '...';
    }

    30% {
        content: '..';
    }

    90% {
        content: '.';
    }

    }

    .refresh-btn {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .refresh-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }

    .welcome-message {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 1rem;
        padding: 2rem;
        margin-bottom: 1rem;
        text-align: center;
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .prompt-refresh-indicator {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(40, 167, 69, 0.9);
        color: white;
        border-radius: 50%;
        width: 12px;
        height: 12px;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%

    {
        opacity: 1;
        transform: scale(1);
    }

    50% {
        opacity: 0.7;
        transform: scale(1.1);
    }

    100% {
        opacity: 1;
        transform: scale(1);
    }

    }

    .message-time {
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .user .message-time {
        color: rgba(255, 255, 255, 0.7);
    }

    .assistant .message-time {
        color: rgba(0, 0, 0, 0.5);
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .chatbot-page-container

    {
        height: calc(100vh - 120px);
        margin: 0.5rem 0;
    }

    .suggestions-panel {
        position: fixed;
        top: 0;
        right: -350px;
        height: 100vh;
        z-index: 1050;
        transition: right 0.3s ease;
    }

        .suggestions-panel.show {
            right: 0;
        }

    .mobile-suggestions-toggle {
        position: fixed;
        top: 50%;
        right: 1rem;
        z-index: 1049;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .chat-content {
        flex-direction: column;
    }

    }

    /* Custom scrollbar */
    .chat-messages::-webkit-scrollbar,
    .suggestions-panel::-webkit-scrollbar {
        width: 6px;
    }

    .chat-messages::-webkit-scrollbar-track,
    .suggestions-panel::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
    }

    .chat-messages::-webkit-scrollbar-thumb,
    .suggestions-panel::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
    }

        .chat-messages::-webkit-scrollbar-thumb:hover,
        .suggestions-panel::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }

    /* Integration with admin theme */
    .btn-primary {
        background-color: #1b6ec2;
        border-color: #1861ac;
    }

        .btn-primary:hover {
            background-color: #1861ac;
            border-color: #164a8a;
        }
</style>

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-12">
            <div class="chatbot-page-container">
                <!-- Chat Header -->
                <div class="chat-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h4 class="mb-1 text-white">
                                <i class="fas fa-robot me-2"></i>
                                AI Assistant
                                <span class="prompt-refresh-indicator" id="refreshIndicator" style="display: none;"></span>
                            </h4>
                            <small class="text-white-50" id="userRoleDisplay">Initializing your personalized assistant...</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <button class="refresh-btn me-2" onclick="refreshPrompts()" title="Refresh suggestions">
                                <i class="fas fa-sync-alt me-1"></i>
                                <span class="d-none d-md-inline">Refresh</span>
                            </button>
                            <button class="refresh-btn" onclick="exportChat()" title="Export conversation">
                                <i class="fas fa-download me-1"></i>
                                <span class="d-none d-md-inline">Export</span>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Chat Content -->
                <div class="chat-content">
                    <!-- Messages Area -->
                    <div class="chat-messages" id="chatMessages">
                        <div class="welcome-message" id="welcomeMessage">
                            <div class="spinner-border text-white mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <h5 class="text-white mb-2">Welcome to your AI Assistant!</h5>
                            <p class="text-white-50 mb-0">Connecting to your garage management system...</p>
                        </div>
                    </div>

                    <!-- Suggestions Panel -->
                    <div class="suggestions-panel" id="suggestionsPanel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="text-white mb-0">
                                <i class="fas fa-lightbulb me-2"></i>
                                Smart Suggestions
                            </h6>
                            <small class="text-white-50" id="lastUpdated">Loading...</small>
                        </div>

                        <!-- Quick Stats -->
                        <div class="quick-stats" id="quickStats">
                            <h6 class="text-white mb-3">
                                <i class="fas fa-chart-bar me-2"></i>
                                Live Dashboard
                            </h6>
                            <div id="statsContent">
                                <div class="text-center text-white-50">
                                    <div class="spinner-border spinner-border-sm mb-2" role="status"></div>
                                    <p class="mb-0">Loading real-time data...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Dynamic Suggestions -->
                        <div>
                            <h6 class="text-white mb-2">
                                <i class="fas fa-magic me-2"></i>
                                Try Asking About
                            </h6>
                            <div id="suggestionsContainer">
                                <div class="text-center text-white-50">
                                    <div class="spinner-border spinner-border-sm mb-2" role="status"></div>
                                    <p class="mb-0">Preparing suggestions...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Related Actions -->
                        <div id="relatedActions" class="related-actions" style="display: none;">
                            <h6 class="text-white mb-2">
                                <i class="fas fa-external-link-alt me-2"></i>
                                Quick Actions
                            </h6>
                            <div id="actionsContainer"></div>
                        </div>
                    </div>
                </div>

                <!-- Chat Input -->
                <div class="chat-input">
                    <div class="input-group">
                        <input type="text" class="form-control" id="messageInput"
                               placeholder="Ask me anything about your garage operations..."
                               onkeypress="handleKeyPress(event)"
                               autocomplete="off">
                        <button class="btn btn-primary" onclick="sendMessage()" title="Send message">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    <div class="typing-indicator" id="typingIndicator">
                        <i class="fas fa-robot me-2"></i>
                        Assistant is thinking<span class="typing-dots"></span>
                    </div>
                    <div class="mt-2">
                        <small class="text-white-50">
                            <i class="fas fa-keyboard me-1"></i>
                            Press Enter to send • Ctrl+Shift+A anywhere for quick access
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Mobile Suggestions Toggle -->
<button class="mobile-suggestions-toggle d-md-none" onclick="toggleMobileSuggestions()">
    <i class="fas fa-lightbulb"></i>
</button>

@section Scripts {
    <!-- Include the complete JavaScript from the previous chatbot integration -->
    <script>
        let currentUserRole = '';
        let conversationHistory = [];
        let lastPromptRefresh = new Date();
        let promptRefreshInterval;

        // Initialize chatbot when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeChatbot();
            startPromptRefreshMonitoring();
        });

        async function initializeChatbot() {
            try {
                console.log('Initializing AI Assistant...');
                const response = await fetch('/api/chatbot/welcome');

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                currentUserRole = data.userRole;
                document.getElementById('userRoleDisplay').textContent = `${data.userRole} Assistant - Ready to help with your garage management!`;

                // Show welcome message
                displayWelcomeMessage(data.message);

                // Update suggestions and stats
                updateSuggestions(data.prompts);
                updateQuickStats(data.quickStats);
                updateLastUpdatedTime();

                // Focus input
                document.getElementById('messageInput').focus();

                console.log('AI Assistant initialized successfully');

            } catch (error) {
                console.error('Error initializing chatbot:', error);
                displayErrorMessage('Failed to initialize your AI assistant. Please refresh the page or contact support.');
            }
        }

        function displayWelcomeMessage(message) {
            const welcomeDiv = document.getElementById('welcomeMessage');
            welcomeDiv.innerHTML = `
                <div class="text-white">
                    <i class="fas fa-check-circle text-success fa-2x mb-3"></i>
                    <h5 class="mb-2">AI Assistant Ready!</h5>
                    ${formatMessage(message)}
                    <div class="mt-3">
                        <small class="text-white-50">
                            <i class="fas fa-info-circle me-1"></i>
                            Click on any suggestion to get started, or type your own question below.
                        </small>
                    </div>
                </div>
            `;
        }

        function displayErrorMessage(message) {
            const welcomeDiv = document.getElementById('welcomeMessage');
            welcomeDiv.innerHTML = `
                <div class="text-danger">
                    <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                    <h6>Connection Error</h6>
                    <p>${message}</p>
                    <button class="btn btn-outline-light btn-sm" onclick="initializeChatbot()">
                        <i class="fas fa-redo me-1"></i>Try Again
                    </button>
                </div>
            `;
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (!message) return;

            // Add user message to chat
            addMessage(message, 'user');

            // Clear input and show typing
            input.value = '';
            showTypingIndicator();

            try {
                const response = await fetch('/api/chatbot/ask', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ question: message })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                // Hide typing indicator
                hideTypingIndicator();

                // Add assistant response
                addMessage(data.answer, 'assistant');

                // Update suggestions with new prompts - this is the key feature!
                if (data.prompts && data.prompts.length > 0) {
                    updateSuggestions(data.prompts);
                    showPromptRefreshIndicator();
                }

                // Update quick stats
                if (data.quickStats) {
                    updateQuickStats(data.quickStats);
                }

                // Show related actions if available
                if (data.relatedActions && data.relatedActions.length > 0) {
                    showRelatedActions(data.relatedActions);
                }

                // Update timestamps
                updateLastUpdatedTime();
                lastPromptRefresh = new Date();

                // Add to conversation history
                conversationHistory.push({
                    question: message,
                    answer: data.answer,
                    category: data.questionCategory,
                    timestamp: new Date(),
                    prompts: data.prompts
                });

                // Auto-scroll to bottom
                smoothScrollToBottom();

            } catch (error) {
                console.error('Error sending message:', error);
                hideTypingIndicator();
                addMessage('I apologize, but I\'m having trouble processing your request right now. Please check your connection and try again.', 'assistant', true);
            }
        }

        function addMessage(content, sender, isError = false) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;

            const bubbleClass = isError ? 'message-bubble bg-danger text-white' : 'message-bubble';
            const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            messageDiv.innerHTML = `
                <div class="${bubbleClass}">
                    ${sender === 'assistant' ? formatMessage(content) : escapeHtml(content)}
                    <div class="message-time">
                        <small>${timestamp}</small>
                    </div>
                </div>
            `;

            messagesContainer.appendChild(messageDiv);

            // Remove welcome message if it exists
            const welcomeMsg = document.getElementById('welcomeMessage');
            if (welcomeMsg && conversationHistory.length === 0 && sender === 'user') {
                welcomeMsg.style.display = 'none';
            }
        }

        function formatMessage(message) {
            // Enhanced message formatting
            return message
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')  // Bold
                .replace(/\*(.*?)\*/g, '<em>$1</em>')              // Italic
                .replace(/\n\n/g, '</p><p>')                       // Paragraphs
                .replace(/\n/g, '<br>')                            // Line breaks
                .replace(/•/g, '&bull;')                           // Bullet points
                .replace(/(\d+)\./g, '<strong>$1.</strong>')       // Numbered lists
                .replace(/RM\s*(\d+(?:\.\d{2})?)/g, '<span class="text-success fw-bold">RM $1</span>') // Currency
                .replace(/(\d+)([%])/g, '<span class="fw-bold">$1$2</span>') // Percentages
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'block';
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }

        function updateSuggestions(prompts) {
            const container = document.getElementById('suggestionsContainer');

            if (!prompts || prompts.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-white-50 py-3">
                        <i class="fas fa-lightbulb fa-2x mb-2 opacity-50"></i>
                        <p class="mb-0">No suggestions available</p>
                        <button class="btn btn-outline-light btn-sm mt-2" onclick="refreshPrompts()">
                            <i class="fas fa-refresh me-1"></i>Refresh
                        </button>
                    </div>
                `;
                return;
            }

            container.innerHTML = '';

            // Group suggestions by category for better organization
            const categorizedPrompts = {};
            prompts.forEach(prompt => {
                if (!categorizedPrompts[prompt.category]) {
                    categorizedPrompts[prompt.category] = [];
                }
                categorizedPrompts[prompt.category].push(prompt);
            });

            // Display suggestions by category
            Object.keys(categorizedPrompts).forEach(category => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'mb-3';

                const categoryHeader = document.createElement('div');
                categoryHeader.className = 'text-white-50 fw-bold mb-2';
                categoryHeader.style.fontSize = '0.8rem';
                categoryHeader.textContent = category.toUpperCase();
                categoryDiv.appendChild(categoryHeader);

                categorizedPrompts[category].forEach(prompt => {
                    const suggestionDiv = document.createElement('div');
                    suggestionDiv.className = 'suggestion-card';
                    suggestionDiv.onclick = () => selectSuggestion(prompt.text);

                    suggestionDiv.innerHTML = `
                        <div class="d-flex align-items-start">
                            <span class="me-2" style="font-size: 1.2em;">${prompt.icon}</span>
                            <div class="flex-grow-1">
                                <div class="text-white fw-medium">${prompt.text}</div>
                            </div>
                        </div>
                    `;

                    categoryDiv.appendChild(suggestionDiv);
                });

                container.appendChild(categoryDiv);
            });
        }

        function updateQuickStats(stats) {
            const container = document.getElementById('statsContent');

            if (!stats || !stats.stats || stats.stats.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-white-50 py-3">
                        <i class="fas fa-chart-bar fa-2x mb-2 opacity-50"></i>
                        <p class="mb-0">No stats available</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = '';

            stats.stats.forEach((stat, index) => {
                const statDiv = document.createElement('div');
                statDiv.className = 'stat-item';
                statDiv.style.animationDelay = `${index * 0.1}s`;

                const colorClass = {
                    'primary': 'text-primary',
                    'success': 'text-success',
                    'warning': 'text-warning',
                    'danger': 'text-danger',
                    'info': 'text-info',
                    'secondary': 'text-secondary'
                }[stat.color] || 'text-white';

                statDiv.innerHTML = `
                    <div class="d-flex align-items-center">
                        <span class="me-2" style="font-size: 1.1em;">${stat.icon}</span>
                        <span class="text-white-50">${stat.label}</span>
                    </div>
                    <span class="text-white fw-bold ${colorClass}">${stat.value}</span>
                `;

                container.appendChild(statDiv);
            });
        }

        function showRelatedActions(actions) {
            const container = document.getElementById('relatedActions');
            const actionsContainer = document.getElementById('actionsContainer');

            if (!actions || actions.length === 0) {
                container.style.display = 'none';
                return;
            }

            actionsContainer.innerHTML = '';

            actions.forEach(action => {
                const actionLink = document.createElement('a');
                actionLink.href = action.url;
                actionLink.className = 'action-btn';
                actionLink.innerHTML = `${action.icon} ${action.text}`;

                actionsContainer.appendChild(actionLink);
            });

            container.style.display = 'block';
        }

        function selectSuggestion(text) {
            const input = document.getElementById('messageInput');
            input.value = text;
            input.focus();

            // Add a small delay to show the text was inserted, then send
            setTimeout(() => {
                sendMessage();
            }, 300);
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        async function refreshPrompts() {
            try {
                const refreshBtn = document.querySelector('.refresh-btn');
                const originalContent = refreshBtn.innerHTML;

                refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i><span class="d-none d-md-inline">Refreshing...</span>';
                refreshBtn.disabled = true;

                const response = await fetch('/api/chatbot/refresh-prompts');
                const data = await response.json();

                updateSuggestions(data.prompts);
                updateQuickStats(data.quickStats);
                updateLastUpdatedTime();
                showPromptRefreshIndicator();

                // Show success feedback
                refreshBtn.innerHTML = '<i class="fas fa-check me-1"></i><span class="d-none d-md-inline">Updated!</span>';

                setTimeout(() => {
                    refreshBtn.innerHTML = originalContent;
                    refreshBtn.disabled = false;
                }, 1500);

                // Show notification
                showNotification('✨ Suggestions refreshed with latest data!');

            } catch (error) {
                console.error('Error refreshing prompts:', error);

                const refreshBtn = document.querySelector('.refresh-btn');
                refreshBtn.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i><span class="d-none d-md-inline">Error</span>';
                refreshBtn.disabled = false;

                setTimeout(() => {
                    refreshBtn.innerHTML = '<i class="fas fa-sync-alt me-1"></i><span class="d-none d-md-inline">Refresh</span>';
                }, 2000);
            }
        }

        function updateLastUpdatedTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            document.getElementById('lastUpdated').textContent = timeString;
        }

        function showPromptRefreshIndicator() {
            const indicator = document.getElementById('refreshIndicator');
            indicator.style.display = 'block';

            setTimeout(() => {
                indicator.style.display = 'none';
            }, 3000);
        }

        function startPromptRefreshMonitoring() {
            // Auto-refresh prompts every 5 minutes
            promptRefreshInterval = setInterval(() => {
                refreshPrompts();
            }, 5 * 60 * 1000);
        }

        function smoothScrollToBottom() {
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.scrollTo({
                top: messagesContainer.scrollHeight,
                behavior: 'smooth'
            });
        }

        function showNotification(message) {
            const toast = document.createElement('div');
            toast.className = 'position-fixed top-0 end-0 m-3 p-3 bg-success text-white rounded shadow-lg';
            toast.style.zIndex = '9999';
            toast.style.minWidth = '250px';
            toast.innerHTML = `
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <i class="fas fa-bell me-2"></i>
                        ${message}
                    </div>
                    <button class="btn-close btn-close-white ms-2" onclick="this.parentElement.parentElement.remove()"></button>
                </div>
            `;

            document.body.appendChild(toast);

            // Auto-remove after 4 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.style.opacity = '0';
                    toast.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        if (toast.parentNode) {
                            document.body.removeChild(toast);
                        }
                    }, 300);
                }
            }, 4000);
        }

        function exportChat() {
            const chatData = {
                userRole: currentUserRole,
                timestamp: new Date().toISOString(),
                conversation: conversationHistory,
                totalMessages: conversationHistory.length,
                sessionDuration: lastPromptRefresh - new Date(conversationHistory[0]?.timestamp || Date.now())
            };

            const blob = new Blob([JSON.stringify(chatData, null, 2)], {
                type: 'application/json'
            });

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `garage-chat-${new Date().toISOString().split('T')[0]}.json`;
            a.click();

            URL.revokeObjectURL(url);

            showNotification('💾 Chat conversation exported successfully!');
        }

        function toggleMobileSuggestions() {
            const panel = document.getElementById('suggestionsPanel');
            panel.classList.toggle('show');
        }

        // Enhanced keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // Alt + R to refresh prompts
            if (event.altKey && event.key === 'r') {
                event.preventDefault();
                refreshPrompts();
            }

            // Escape to clear input or close mobile panel
            if (event.key === 'Escape') {
                const input = document.getElementById('messageInput');
                if (input.value) {
                    input.value = '';
                } else {
                    const panel = document.getElementById('suggestionsPanel');
                    panel.classList.remove('show');
                }
                input.focus();
            }

            // Ctrl + E to export chat
            if (event.ctrlKey && event.key === 'e') {
                event.preventDefault();
                exportChat();
            }
        });

        // Add window focus event to refresh prompts when user returns
        window.addEventListener('focus', function() {
            const timeSinceLastRefresh = new Date() - lastPromptRefresh;
            // If it's been more than 2 minutes since last refresh, auto-refresh
            if (timeSinceLastRefresh > 2 * 60 * 1000) {
                refreshPrompts();
            }
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (promptRefreshInterval) {
                clearInterval(promptRefreshInterval);
            }
        });

        // Add some helpful tips for first-time users
        function showFirstTimeHelp() {
            const hasSeenHelp = localStorage.getItem('garage_chatbot_help_shown');
            if (!hasSeenHelp) {
                setTimeout(() => {
                    showNotification('💡 Tip: Click on any suggestion to ask that question instantly!');
                    localStorage.setItem('garage_chatbot_help_shown', 'true');
                }, 3000);
            }
        }

        // Initialize help after everything loads
        setTimeout(showFirstTimeHelp, 2000);
    </script>
}